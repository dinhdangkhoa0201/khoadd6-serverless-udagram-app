org: dinhdangkhoa0201
console: true
service: khoadd6-serverless-udagram-app

# Define serverless plugins
plugins:
    - serverless-webpack
    - serverless-aws-documentation
    - serverless-reqvalidator-plugin

provider:
    name: aws
    runtime: nodejs16.x
    stage: ${opt:stage, 'dev'}
    region: ${opt:stage, 'ap-southeast-1'}
    # Define environment
    environment:
        GROUPS_TABLE: Groups-${self:provider.stage}
        IMAGES_TABLE: Images-${self:provider.stage}
        CONNECTIONS_TABLE: Connections-${self:provider.stage}
        IMAGE_ID_INDEX: ImageIdIndex
        IMAGES_S3_BUCKET: serverless-udagram-image-${self:provider.stage}
        SIGNED_URL_EXPIRATION: 300
        THUMBNAILS_S3_BUCKET: serverless-udagram-thumbnails-${self:provider.stage}

    # Define Role to Scan and Write on DynamoDB
    iamRoleStatements:
        -   Effect: Allow
            Action:
                - dynamodb:Scan
                - dynamodb:PutItem
                - dynamodb:GetItem
            Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
        -   Effect: Allow
            Action:
                - dynamodb:Query
                - dynamodb:PutItem
            Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
        -   Effect: Allow
            Action:
                - dynamodb:Query
            Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}
        -   Effect: Allow
            Action:
                - s3:PutObject
                - s3:GetObject
            Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        -   Effect: Allow
            Action:
                - S3:PutObject
            Resource: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*
        -   Effect: Allow
            Action:
                - dynamodb:Scan
                - dynamodb:PutItem
                - dynamodb:DeleteItem
            Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

custom:
    topicName: imagesTopic-${self:provider.stage}
    documentation:
        api:
            info:
                version: v1.0.0
                title: Udagram API
                description: Serverless application for images sharing
        models:
            -   name: GroupRequest
                contentType: application/json
                schema: ${file(models/create-group-request.json)}
            -   name: ImageRequest
                contentType: application/json
                schema: ${file(models/create-image-request.json)}

# Define serverless function
functions:
    # Define function getGroup
    getGroup:
        handler: src/lambda/http/getGroup.handler
        events:
            -   http:
                    method: get
                    path: groups
                    cors: true

    # Define function createGroup
    createGroup:
        handler: src/lambda/http/createGroup.handler
        events:
            -   http:
                    method: post
                    path: groups
                    cors: true
                    reqValidatorName: RequestBodyValidator
                    documentation:
                        summary: Create a new group
                        description: Create a new group
                        requestModels:
                            "application/json": GroupRequest

    # Define function getImages
    getImages:
        handler: src/lambda/http/getImages.handler
        events:
            -   http:
                    method: get
                    path: groups/{groupId}/images
                    cors: true

    # Define function getImage
    getImage:
        handler: src/lambda/http/getImage.handler
        events:
            -   http:
                    method: get
                    path: images/{imageId}
                    cors: true

    # Define function createImage
    createImage:
        handler: src/lambda/http/createImage.handler
        events:
            -   http:
                    method: post
                    path: groups/{groupId}/images
                    cors: true
                    reqValidatorName: RequestBodyValidator
                    documentation:
                        summary: Create a new image
                        description: Create a new image
                        requestModels:
                            "application/json": ImageRequest

    sendNotifications:
        environment:
            STAGE: ${self:provider.stage}
            API_ID:
                Ref: WebsocketsApi
        handler: src/lambda/s3/sendNotifications.handler
        events:
            -   sns:
                    arn:
                        Fn::Join:
                            - ":"
                            -   - arn:aws:sns
                                -   Ref: AWS::Region
                                -   Ref: AWS::AccountId
                                - ${self:custom.topicName}
                    topicName: ${self:custom.topicName}

    connectWebSocket:
        handler: src/lambda/websocket/connect.handler
        events:
            -   websocket:
                    route: $connect

    disconnectWebSocket:
        handler: src/lambda/websocket/disconnect.handler
        events:
            -   websocket:
                    route: $disconnect

    syncWithElasticSearch:
        handler: src/lambda/dynamoDb/elasticSearchSync.handler
        events:
            -   stream:
                    type: dynamodb
                    arn: !GetAtt ImagesDynamoDBTable.StreamArn

    resizeImage:
        handler: src/lambda/s3/resizeImage.handler
        events:
            -   sns:
                    arn:
                        Fn::Join:
                            - ":"
                            -   - arn:aws:sns
                                -   Ref: AWS::Region
                                -   Ref: AWS::AccountId
                                - ${self:custom.topicName}
                    topicName: ${self:custom.topicName}

# Define AWS Resources
resources:
    Resources:
        # Create Api Gateway Validator
        RequestBodyValidator:
            Type: AWS::ApiGateway::RequestValidator
            Properties:
                Name: "request-body-validator"
                RestApiId:
                    Ref: ApiGatewayRestApi
                ValidateRequestBody: true
                ValidateRequestParameters: false

        # Create DynamoDB Table: Groups-
        GroupsDynamoDBTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    -   AttributeName: id
                        AttributeType: S
                KeySchema:
                    -   AttributeName: id
                        KeyType: HASH
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:provider.environment.GROUPS_TABLE}

        ConnectionsDynamoDBTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    -   AttributeName: id
                        AttributeType: S
                KeySchema:
                    -   AttributeName: id
                        KeyType: HASH
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:provider.environment.CONNECTIONS_TABLE}

        # Create DynamoDB Table: Images-
        ImagesDynamoDBTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    -   AttributeName: groupId
                        AttributeType: S
                    -   AttributeName: timestamp
                        AttributeType: S
                    -   AttributeName: imageId
                        AttributeType: S
                KeySchema:
                    -   AttributeName: groupId
                        KeyType: HASH
                    -   AttributeName: timestamp
                        KeyType: RANGE
                GlobalSecondaryIndexes:
                    -   IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
                        KeySchema:
                            -   AttributeName: imageId
                                KeyType: HASH
                        Projection:
                            ProjectionType: ALL
                BillingMode: PAY_PER_REQUEST
                StreamSpecification:
                    StreamViewType: NEW_IMAGE
                TableName: ${self:provider.environment.IMAGES_TABLE}

        # Create S3 Bucket
        AttachmentsBucket:
            Type: AWS::S3::Bucket
            DependsOn: SNSTopicPolicy
            Properties:
                BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
                NotificationConfiguration:
                    TopicConfigurations:
                        -   Event: s3:ObjectCreated:Put
                            Topic: !Ref ImagesTopic
                CorsConfiguration:
                    CorsRules:
                        -   AllowedOrigins:
                                - "*"
                            AllowedHeaders:
                                - "*"
                            AllowedMethods:
                                - GET
                                - PUT
                                - POST
                                - DELETE
                                - HEAD
                            MaxAge: 3000

        ThumbnailsBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}

        SendNotificationsPermission:
            Type: AWS::Lambda::Permission
            Properties:
                FunctionName: !Ref SendNotificationsLambdaFunction
                Principal: s3.amazonaws.com
                Action: lambda:InvokeFunction
                SourceAccount: !Ref AWS::AccountId
                SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}


        BucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                PolicyDocument:
                    Id: MyPolicy
                    Version: "2012-10-17"
                    Statement:
                        -   Sid: PublicReadForGetBucketObjects
                            Effect: Allow
                            Principal: "*"
                            Action: "s3:GetObject"
                            Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"
                Bucket: !Ref AttachmentsBucket

        SNSTopicPolicy:
            Type: AWS::SNS::TopicPolicy
            Properties:
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        -   Effect: "Allow"
                            Principal:
                                AWS: "*"
                            Action: sns:Publish
                            Resource:
                              !Ref ImagesTopic
                            Condition:
                                ArnLike:
                                    AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
                Topics:
                    - !Ref ImagesTopic

        ImagesTopic:
            Type: AWS::SNS::Topic
            Properties:
                DisplayName: Image bucket topic
                TopicName: ${self:custom.topicName}

#        ImagesSearch:
#            Type: AWS::Elasticsearch::Domain
#            Properties:
#                ElasticsearchVersion: "6.7"
#                DomainName: images-search-${self:provider.stage}
#                ElasticsearchClusterConfig:
#                    DedicatedMasterEnabled: false
#                    InstanceCount: "1"
#                    ZoneAwarenessEnabled: false
#                    InstanceType: t2.small.elasticsearch
#                EBSOptions:
#                    EBSEnabled: true
#                    Iops: 0
#                    VolumeSize: 10
#                    VolumeType: "gp2"
#                AccessPolicies:
#                    Version: "2012-10-17"
#                    Statement:
#                        -   Effect: Allow
#                            Principal:
#                                AWS: "*"
#                            Action: "es:ESHttp*"
#                            Resource: "arn:aws:es:${self:provider.region}:${AWS::AccountId}:domain/images-search-${self:provider.stage}/*"
